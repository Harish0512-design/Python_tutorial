{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Data Structures","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPry03/WbqdKLmD1M6fbnm8"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"xsTpomhTPTdL","colab_type":"code","colab":{}},"source":["# Data Structures in Python..\n","# There are 2 types of data structures \n","#               1. Linear Data structures --------> 1.Array or List    |------------> Used to implement Stack and Queue\n","#                                                   2.Linked List      |\n","#                                                   3. Stack\n","#                                                   4. Queue\n","#               2. Non-Linear Data structures -------------------> 1. Graphs\n","#                                                                  2. Trees\n","#                                                                  3. Hash Tables"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N6TzDrNoE9Tw","colab_type":"code","colab":{}},"source":["# Linked List \n","# operations :: add(),insert(),delete(),display(),find_node()\n","# nodes are linked together to form a linked list\n","# nodes have data_part and next_part(address of next node.)\n","# linkedlist has a head and tail        (head)1 --> 2 --> 3(tail) \n","# implementation of Node class\n","\n","\n","class Node:\n","  def __init__(self,data):\n","    self.__data = data\n","    self.__next = None\n","  def get_data(self):\n","    return self.__data\n","  def get_next(self):\n","    return self.__next\n","  def set_data(self,data):\n","    self.__data = data\n","  def set_next(self,next_node):\n","    self.__next = next_node\n","\n","\n","# creating a linked list\n","\n","class LinkedList:\n","    def __init__(self):\n","         self.__head=None\n","         self.__tail=None\n","\n","    def get_head(self):\n","        return self.__head\n","\n","    def get_tail(self):\n","        return self.__tail\n","\n","\n","    def add(self,data):\n","        new_node=Node(data)\n","        if(self.__head is None):\n","            self.__head=self.__tail=new_node\n","        else:\n","            self.__tail.set_next(new_node)\n","            self.__tail=new_node\n","\n","    def insert(self,data,data_before):\n","        new_node=Node(data)\n","        if(data_before==None):\n","            new_node.set_next(self.__head)\n","            self.__head=new_node\n","            if(new_node.get_next()==None):\n","                self.__tail=new_node\n","\n","        else:\n","            node_before=self.find_node(data_before)\n","            if(node_before is not None):\n","                new_node.set_next(node_before.get_next())\n","                node_before.set_next(new_node)\n","                if(new_node.get_next() is None):\n","                    self.__tail=new_node\n","            else:\n","                print(data_before,\"is not present in the Linked list\")\n","\n","    def display(self):\n","        temp=self.__head\n","        while(temp is not None):\n","            print(temp.get_data())\n","            temp=temp.get_next()\n","\n","\n","    def find_node(self,data):\n","        temp=self.__head\n","        while(temp is not None):\n","            if(temp.get_data()==data):\n","                return temp\n","            temp=temp.get_next()\n","        return None\n","\n","    def delete(self,data):\n","        node=self.find_node(data)\n","        if(node is not None):\n","            if(node==self.__head):\n","                if(self.__head==self.__tail):\n","                    self.__tail=None\n","                self.__head=node.get_next()\n","            else:\n","                temp=self.__head\n","                while(temp is not None):\n","                    if(temp.get_next()==node):\n","                        temp.set_next(node.get_next())\n","                        if(node==self.__tail):\n","                            self.__tail=temp\n","                        node.set_next(None)\n","                        break\n","                    temp=temp.get_next()\n","        else:\n","            print(data,\"is not present in Linked list\")\n","\n","    #You can use the below __str__() to print the elements of the DS object while debugging\n","    def __str__(self):\n","        temp=self.__head\n","        msg=[]\n","        while(temp is not None):\n","            msg.append(str(temp.get_data()))\n","            temp=temp.get_next()\n","        msg=\" \".join(msg)\n","        msg=\"Linkedlist data(Head to Tail): \"+ msg\n","        return msg\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4OZB03IVNSGP","colab_type":"code","colab":{}},"source":["# Stack \n","# uses python list to implementation. \n","# last in first out [LIFO]\n","# operations Push , Pop\n","# functions involved in implementation are is_full(),is_empty(),push(),pop(),display()\n","\n","class Stack:\n","    def __init__(self,max_size):\n","        self.__max_size=max_size\n","        self.__elements=[None]*self.__max_size\n","        self.__top=-1\n","\n","    def is_full(self):\n","        if(self.__top==self.__max_size-1):\n","            return True\n","        return False\n","\n","    def is_empty(self):\n","        if(self.__top==-1):\n","            return True\n","        return False\n","\n","    def push(self,data):\n","        if(self.is_full()):\n","            print(\"The stack is full!!\")\n","        else:\n","            self.__top+=1\n","            self.__elements[self.__top]=data\n","\n","    def pop(self):\n","        if(self.is_empty()):\n","            print(\"The stack is empty!!\")\n","        else:\n","            data= self.__elements[self.__top]\n","            self.__top-=1\n","            return data\n","\n","    def display(self):\n","        if(self.is_empty()):\n","            print(\"The stack is empty\")\n","        else:\n","            index=self.__top\n","            while(index>=0):\n","                print(self.__elements[index])\n","                index-=1\n","\n","    def get_max_size(self):\n","        return self.__max_size\n","\n","    #You can use the below __str__() to print the elements of the DS object while debugging\n","    def __str__(self):\n","        msg=[]\n","        index=self.__top\n","        while(index>=0):\n","            msg.append((str)(self.__elements[index]))\n","            index-=1\n","        msg=\" \".join(msg)\n","        msg=\"Stack data(Top to Bottom): \"+msg\n","        return msg\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K3QB86G9OBy8","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1598100712361,"user_tz":-330,"elapsed":2411,"user":{"displayName":"HARISH SOMSOLE","photoUrl":"https://lh6.googleusercontent.com/-yUjviJU7WyU/AAAAAAAAAAI/AAAAAAAABXY/mw_0nO7jivA/s64/photo.jpg","userId":"06025114144293002373"}}},"source":["# Queue\n","# uses python list for implementation\n","# First in First Out [FIFO]\n","# operations enqueue(),dequeue()\n","# functions involved are is_full(),is_empty(),enqueue(),dequeue(),display()\n","\n","class Queue:\n","    def __init__(self,max_size):\n","\n","        self.__max_size=max_size\n","        self.__elements=[None]*self.__max_size\n","        self.__rear=-1\n","        self.__front=0\n","\n","    def is_full(self):\n","        if(self.__rear==self.__max_size-1):\n","                return True\n","        return False\n","\n","    def is_empty(self):\n","        if(self.__front>self.__rear):\n","            return True\n","        return False\n","\n","    def enqueue(self,data):\n","        if(self.is_full()):\n","            print(\"Queue is full!!!\")\n","        else:\n","            self.__rear+=1\n","            self.__elements[self.__rear]=data\n","\n","    def dequeue(self):\n","        if(self.is_empty()):\n","            print(\"Queue is empty!!!\")\n","        else:\n","            data=self.__elements[self.__front]\n","            self.__front+=1\n","            return data\n","\n","    def display(self):\n","        for index in range(self.__front, self.__rear+1):\n","            print(self.__elements[index])\n","\n","\n","    def get_max_size(self):\n","        return self.__max_size\n","\n","    #You can use the below __str__() to print the elements of the DS object while debugging\n","    def __str__(self):\n","        msg=[]\n","        index=self.__front\n","        while(index<=self.__rear):\n","            msg.append((str)(self.__elements[index]))\n","            index+=1\n","        msg=\" \".join(msg)\n","        msg=\"Queue data(Front to Rear): \"+msg\n","        return msg\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"EXlYgLR2OV_s","colab_type":"code","colab":{}},"source":["# Searching Algorithms \n","# 1. Linear Search -----------------> searches a element in a list linearly i.e., sequentially (random order)\n","# 2. Binary Search -----------------> make a list into 2 halves and searches element, (only Ascending or decending order)\n","\n","# Linear Search\n"],"execution_count":null,"outputs":[]}]}